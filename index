<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulaire Site Bien Fait</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Ajout de liens vers plus de polices pour la section typographie -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&family=Lato:wght@400;700&family=Montserrat:wght@400;700&family=Open+Sans:wght@400;700&family=Playfair+Display:wght@400;700&family=Raleway:wght@400;700&family=Source+Sans+Pro:wght@400;700&family=Ubuntu:wght@400;700&family=Merriweather:wght@400;700&family=Nunito:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #503D59;
            --secondary: #F3A884;
            --accent: #AE5753;
            --text: #FFFFFF;
            --background: #42304A;
            --light-bg: rgba(255, 255, 255, 0.1);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--background);
            color: var(--text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }
        
        h1 {
            font-size: 2rem;
            color: var(--secondary);
            margin-bottom: 10px;
            text-align: center;
        }
        
        p.subtitle {
            font-size: 1rem;
            opacity: 0.9;
            text-align: center;
            margin-bottom: 40px;
        }
        
        .progress-container {
            display: flex;
            justify-content: center;
            width: 100%;
            max-width: 600px;
            margin-bottom: 30px;
        }
        
        .progress-dots {
            display: flex;
            width: 100%;
            justify-content: space-between;
            padding: 0 20px;
        }
        
        .dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.3);
            transition: background-color 0.3s ease;
            cursor: pointer;
        }
        
        .dot.active {
            background-color: var(--secondary);
        }
        
        .form-container {
            width: 100%;
            max-width: 600px;
            display: flex;
            flex-direction: column;
            margin: 0 auto;
        }
        
        .form-screen {
            display: none;
            width: 100%;
        }
        
        .form-screen.active {
            display: flex;
            flex-direction: column;
        }
        
        .screen-title {
            font-size: 1.5rem;
            color: var(--secondary);
            margin-bottom: 30px;
        }
        
        .form-field {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 10px;
            font-weight: 500;
        }
        
        .form-input, 
        .form-select, 
        .form-textarea {
            width: 100%;
            padding: 12px 15px;
            border-radius: 8px;
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: var(--text);
            font-family: 'Poppins', sans-serif;
            font-size: 16px;
        }
        
        .form-input:focus, 
        .form-select:focus, 
        .form-textarea:focus {
            outline: none;
            border-color: var(--secondary);
        }
        
        .form-textarea {
            min-height: 100px;
            resize: vertical;
        }
        
        .radio-group,
        .checkbox-group {
            margin-bottom: 10px;
        }
        
        .radio-label,
        .checkbox-label {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
            cursor: pointer;
        }
        
        .radio-input,
        .checkbox-input {
            margin-right: 12px;
            width: 18px;
            height: 18px;
            accent-color: var(--secondary);
        }
        
        .font-container {
            max-height: 400px;
            overflow-y: auto;
            padding-right: 10px;
            margin-bottom: 20px;
        }
        
        .font-options {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 10px;
        }
        
        .font-option {
            padding: 10px;
            border-radius: 8px;
            background-color: rgba(255, 255, 255, 0.1);
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .font-option.selected {
            background-color: rgba(243, 168, 132, 0.3);
            border: 1px solid var(--secondary);
        }
        
        /* Styles pour la pagination des fonts */
        .font-pagination {
            display: flex;
            justify-content: center;
            margin-top: 10px;
            margin-bottom: 20px;
        }
        
        .font-pagination button {
            background-color: rgba(255, 255, 255, 0.1);
            border: none;
            color: var(--text);
            padding: 5px 10px;
            margin: 0 5px;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .font-pagination button.active {
            background-color: var(--secondary);
            color: var(--primary);
        }
        
        .font-search {
            margin-bottom: 10px;
        }
        
        .font-search input {
            width: 100%;
            padding: 8px 12px;
            border-radius: 4px;
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: var(--text);
        }
        
        .font-category-tabs {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 15px;
            gap: 5px;
        }
        
        .font-category-tab {
            padding: 5px 10px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            cursor: pointer;
        }
        
        .font-category-tab.active {
            background-color: var(--secondary);
            color: var(--primary);
        }
        
        .file-upload {
            display: flex;
            flex-direction: column;
        }
        
        .file-upload-button {
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px dashed rgba(255, 255, 255, 0.3);
            padding: 15px;
            border-radius: 8px;
            cursor: pointer;
        }
        
        .file-upload-icon {
            margin-right: 10px;
        }
        
        .conditional-field {
            display: none;
            margin-top: 10px;
        }
        
        .conditional-field.visible {
            display: block;
        }
        
        .page-details {
            margin-top: 20px;
            padding: 15px;
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            display: none;
        }
        
        .page-details.visible {
            display: block;
        }
        
        .navigation-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
        }
        
        .btn {
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            border: none;
            font-family: 'Poppins', sans-serif;
            transition: all 0.3s ease;
        }
        
        .btn-next {
            background-color: var(--secondary);
            color: var(--primary);
        }
        
        .btn-prev {
            background-color: transparent;
            border: 1px solid var(--secondary);
            color: var(--text);
        }
        
        .btn-next:hover {
            opacity: 0.9;
        }
        
        .btn-prev:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .save-draft {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            color: var(--text);
            opacity: 0.8;
            padding: 10px;
            cursor: pointer;
            margin-bottom: 20px;
        }
        
        .save-draft:hover {
            opacity: 1;
        }
        
        .save-status {
            font-size: 12px;
            margin-left: 10px;
        }
        
        .error-message {
            color: #ff6b6b;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }
        
        .form-field.error .error-message {
            display: block;
        }
        
        .form-field.error .form-input,
        .form-field.error .form-select,
        .form-field.error .form-textarea {
            border-color: #ff6b6b;
        }
        
        /* Styles pour le calendrier */
        .calendar-container {
            margin-top: 15px;
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 15px;
        }
        
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .calendar-nav {
            background: none;
            border: none;
            color: var(--text);
            cursor: pointer;
            font-size: 20px;
        }
        
        .calendar-month {
            font-weight: 500;
        }
        
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }
        
        .calendar-day-header {
            text-align: center;
            font-weight: 500;
            font-size: 12px;
            padding-bottom: 10px;
        }
        
        .calendar-day {
            text-align: center;
            padding: 10px 5px;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .calendar-day:hover:not(.disabled):not(.empty) {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .calendar-day.selected {
            background-color: var(--secondary);
            color: var(--primary);
            font-weight: 500;
        }
        
        .calendar-day.disabled {
            opacity: 0.3;
            cursor: not-allowed;
        }
        
        .calendar-day.empty {
            visibility: hidden;
        }
        
        .time-slots {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
            margin-top: 15px;
        }
        
        .time-slot {
            text-align: center;
            padding: 8px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            cursor: pointer;
        }
        
        .time-slot:hover:not(.disabled) {
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .time-slot.selected {
            background-color: var(--secondary);
            color: var(--primary);
            font-weight: 500;
        }
        
        .time-slot.disabled {
            opacity: 0.3;
            cursor: not-allowed;
        }
        
        /* Styles pour le récapitulatif */
        .recap-section {
            margin-bottom: 25px;
        }
        
        .recap-section-title {
            font-size: 1.1rem;
            color: var(--secondary);
            margin-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .recap-edit-btn {
            background: none;
            border: none;
            color: var(--text);
            cursor: pointer;
            font-size: 14px;
            opacity: 0.8;
            transition: opacity 0.3s ease;
        }
        
        .recap-edit-btn:hover {
            opacity: 1;
        }
        
        .recap-content {
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 15px;
        }
        
        .recap-item {
            margin-bottom: 8px;
        }
        
        .recap-label {
            font-weight: 500;
            margin-bottom: 3px;
        }
        
        .recap-value {
            opacity: 0.9;
        }
        
        /* Recommended choice styling */
        .recommended-choice {
            display: inline-block;
            font-style: italic;
            color: var(--secondary);
            margin-left: 5px;
        }
        
        .recommended-choice::before {
            content: "★ ";
        }
        
        /* Assistant IA (plus discret) */
        .assistant-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: var(--secondary);
            color: var(--primary);
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            z-index: 1000;
        }
        
        .assistant-chat {
            position: fixed;
            bottom: 80px;
            right: 20px;
            width: 320px;
            height: 400px;
            background-color: #fff;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            display: none;
            flex-direction: column;
            overflow: hidden;
            z-index: 1000;
        }
        
        .assistant-header {
            background-color: var(--primary);
            color: #fff;
            padding: 12px 15px;
        }
        
        .assistant-messages {
            flex-grow: 1;
            padding: 15px;
            overflow-y: auto;
            background-color: #f8f8f8;
        }
        
        .assistant-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #eee;
        }
        
        .assistant-input input {
            flex-grow: 1;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 20px;
            margin-right: 10px;
        }
        
        .assistant-input button {
            background-color: var(--secondary);
            color: var(--primary);
            border: none;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }
        
        .message {
            padding: 8px 12px;
            margin-bottom: 10px;
            border-radius: 10px;
            max-width: 80%;
        }
        
        .message.assistant {
            background-color: #f0f0f0;
            color: #333;
            align-self: flex-start;
        }
        
        .message.user {
            background-color: var(--secondary);
            color: var(--primary);
            align-self: flex-end;
            margin-left: auto;
        }
        
        /* Color picker styles */
        .color-picker-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-top: 10px;
        }
        
        .color-swatch {
            height: 40px;
            border-radius: 4px;
            cursor: pointer;
            transition: transform 0.2s ease;
        }
        
        .color-swatch:hover {
            transform: scale(1.05);
        }
        
        .color-swatch.selected {
            box-shadow: 0 0 0 2px white, 0 0 0 4px var(--secondary);
        }
        
        .custom-color-input {
            grid-column: span 3;
            margin-top: 10px;
        }
        
        /* Responsive adaptations */
        @media (max-width: 768px) {
            .form-container {
                padding: 0;
            }
            
            .font-options {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            }
            
            .time-slots {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .navigation-buttons {
                padding: 0 10px;
            }
            
            .btn {
                padding: 10px 20px;
            }
        }
        
        @media (max-width: 480px) {
            body {
                padding: 15px;
            }
            
            h1 {
                font-size: 1.8rem;
            }
            
            .screen-title {
                font-size: 1.3rem;
            }
            
            .dot {
                width: 8px;
                height: 8px;
            }
            
            .time-slots {
                grid-template-columns: 1fr;
            }
            
            .assistant-chat {
                width: 90%;
                right: 5%;
                left: 5%;
                bottom: 70px;
            }
            
            .font-options {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            }
        }
    </style>
</head>
<body>
    <h1>Site Bien Fait</h1>
    <p class="subtitle">Formulaire de collecte d'informations pour votre site vitrine professionnel</p>
    
    <div class="progress-container">
        <div class="progress-dots" id="progressDots">
            <!-- Dots will be generated by JS -->
        </div>
    </div>
    
    <div class="form-container">
        <div class="save-draft" id="saveDraft">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline></svg>
            Sauvegarder le brouillon
            <span class="save-status" id="saveStatus"></span>
        </div>
        
        <!-- Screen 1: Identité de l'entreprise -->
        <div class="form-screen active" id="screen1">
            <h2 class="screen-title">1. Identité de l'entreprise</h2>
            
            <div class="form-field">
                <label class="form-label" for="companyName">Nom de l'entreprise</label>
                <input type="text" id="companyName" class="form-input" required placeholder="Ex: Dupont Consulting" autocomplete="organization">
                <div class="error-message">Veuillez renseigner le nom de votre entreprise</div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="mainActivity">Activité principale</label>
                <input type="text" id="mainActivity" class="form-input" required placeholder="Ex: Coaching en développement personnel">
                <div class="error-message">Veuillez renseigner votre activité principale</div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="sector">Secteur d'activité</label>
                <select id="sector" class="form-select" required>
                    <option value="" disabled selected>Sélectionnez un secteur</option>
                    <option value="commerce">Commerce</option>
                    <option value="artisanat">Artisanat</option>
                    <option value="services">Services</option>
                    <option value="restauration">Restauration</option>
                    <option value="sante">Santé & Bien-être</option>
                    <option value="batiment">Bâtiment & Construction</option>
                    <option value="tech">Technologie & Digital</option>
                    <option value="education">Éducation & Formation</option>
                    <option value="autre">Autre</option>
                </select>
                <div class="error-message">Veuillez sélectionner un secteur d'activité</div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="location">Ville / Zone géographique principale</label>
                <input type="text" id="location" class="form-input" required placeholder="Ex: Lyon et agglomération">
                <div class="error-message">Veuillez renseigner votre zone géographique</div>
            </div>
            
            <div class="navigation-buttons">
                <div></div> <!-- Empty div for spacing -->
                <button class="btn btn-next" data-next="2">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 2: Logo et charte graphique -->
        <div class="form-screen" id="screen2">
            <h2 class="screen-title">2. Logo et charte graphique</h2>
            
            <!-- Question sur le logo existant -->
            <div class="form-field">
                <label class="form-label">Avez-vous un logo ?</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="hasLogo" value="yes" class="radio-input" id="hasLogoYes">
                        Oui
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="hasLogo" value="no" class="radio-input" id="hasLogoNo" checked>
                        Non
                    </label>
                </div>
            </div>
            
            <!-- Champ d'upload de logo (si oui) -->
            <div class="conditional-field" id="logoUploadField">
                <div class="form-field">
                    <label class="form-label">Télécharger votre logo</label>
                    <div class="file-upload">
                        <label class="file-upload-button">
                            <span class="file-upload-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>
                            </span>
                            Cliquez pour télécharger votre logo
                            <input type="file" id="logoFile" accept=".jpg,.png,.svg,.pdf" style="display: none;">
                        </label>
                    </div>
                    <div id="logoFileName" class="mt-2 text-sm"></div>
                </div>
                
                <!-- Question charte graphique (si logo oui) -->
                <div class="form-field">
                    <label class="form-label">Avez-vous une charte graphique ?</label>
                    
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="hasCharte" value="yes" class="radio-input" id="hasCharteYes">
                            Oui
                        </label>
                    </div>
                    
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="hasCharte" value="no" class="radio-input" id="hasCharteNo" checked>
                            Non
                        </label>
                    </div>
                </div>
                
                <!-- Si a une charte graphique -->
                <div class="conditional-field" id="charteDetailsField">
                    <div class="form-field">
                        <label class="form-label">Télécharger votre charte graphique</label>
                        <div class="file-upload">
                            <label class="file-upload-button">
                                <span class="file-upload-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>
                                </span>
                                Cliquez pour télécharger votre charte graphique
                                <input type="file" id="charteFile" accept=".pdf,.jpg,.png" style="display: none;">
                            </label>
                        </div>
                        <div id="charteFileName" class="mt-2 text-sm"></div>
                    </div>
                    
                    <div class="form-field">
                        <label class="form-label" for="charteTypography">Polices utilisées dans votre charte</label>
                        <input type="text" id="charteTypography" class="form-input" placeholder="Ex: Montserrat, Open Sans">
                    </div>
                    
                    <div class="form-field">
                        <label class="form-label" for="charteColors">Couleurs principales (codes hex si possible)</label>
                        <input type="text" id="charteColors" class="form-input" placeholder="Ex: #3366CC, #FF9900">
                    </div>
                    
                    <div class="form-field">
                        <label class="form-label" for="charteDetails">Indications particulières</label>
                        <textarea id="charteDetails" class="form-textarea" placeholder="Précisez toutes informations utiles sur votre charte graphique"></textarea>
                    </div>
                </div>
            </div>
            
            <!-- Si pas de logo, questions sur les préférences -->
            <div class="conditional-field" id="logoPreferencesField">
                <div class="form-field">
                    <label class="form-label">Quel type de logo souhaiteriez-vous ?</label>
                    
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="logoType" value="lettrage" class="radio-input">
                            Lettrage (texte stylisé)
                        </label>
                    </div>
                    
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="logoType" value="pictogramme" class="radio-input">
                            Pictogramme avec lettrage
                        </label>
                    </div>
                    
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="logoType" value="abstrait" class="radio-input">
                            Logo abstrait
                        </label>
                    </div>
                    
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="logoType" value="none" class="radio-input" checked>
                            Pas de préférence
                        </label>
                    </div>
                </div>
                
                <div class="form-field">
                    <label class="form-label">Inspirations pour votre logo (optionnel)</label>
                    <div class="file-upload">
                        <label class="file-upload-button">
                            <span class="file-upload-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>
                            </span>
                            Télécharger des exemples de logos qui vous plaisent
                            <input type="file" id="logoInspiration" accept=".jpg,.png,.svg,.pdf" multiple style="display: none;">
                        </label>
                    </div>
                    <div id="logoInspirationName" class="mt-2 text-sm"></div>
                </div>
                
                <div class="form-field">
                    <label class="form-label" for="logoInspirationURLs">URLs d'exemples de logos que vous aimez (optionnel)</label>
                    <textarea id="logoInspirationURLs" class="form-textarea" placeholder="https://exemple.com/logo.jpg, https://pinterest.com/pin/123456..."></textarea>
                </div>
                
                <!-- Sélecteur de couleurs -->
                <div class="form-field">
                    <label class="form-label">Quelles couleurs préférez-vous pour votre site/logo ?</label>
                    <p style="margin-bottom: 10px; opacity: 0.8;">Sélectionnez jusqu'à 3 couleurs</p>
                    
                    <div class="color-picker-container" id="colorPicker">
                        <!-- Les couleurs seront générées dynamiquement -->
                    </div>
                    
                    <div class="custom-color-input">
                        <label class="form-label" for="customColor">Ajouter une couleur personnalisée</label>
                        <input type="text" id="customColor" class="form-input" placeholder="Ex: #FF5500">
                        <button type="button" id="addCustomColor" style="background-color: var(--secondary); color: var(--primary); border: none; padding: 8px 12px; border-radius: 4px; margin-top: 8px; cursor: pointer;">Ajouter</button>
                    </div>
                </div>
            </div>
            
            <!-- Polices d'écriture (pour tous) -->
            <div class="form-field" id="typographyField">
                <label class="form-label">Polices d'écriture préférées pour votre site</label>
                <p style="margin-bottom: 10px; opacity: 0.8;">Sélectionnez jusqu'à 3 polices qui vous plaisent</p>
                
                <!-- Onglets de catégories de polices -->
                <div class="font-category-tabs" id="fontCategoryTabs">
                    <div class="font-category-tab active" data-category="all">Toutes</div>
                    <div class="font-category-tab" data-category="serif">Serif</div>
                    <div class="font-category-tab" data-category="sans-serif">Sans Serif</div>
                    <div class="font-category-tab" data-category="display">Display</div>
                    <div class="font-category-tab" data-category="handwriting">Manuscrites</div>
                </div>
                
                <!-- Barre de recherche de police -->
                <div class="font-search">
                    <input type="text" id="fontSearch" placeholder="Rechercher une police...">
                </div>
                
                <!-- Conteneur avec scroll pour les polices -->
                <div class="font-container">
                    <div class="font-options" id="fontOptions">
                        <!-- Les polices seront générées dynamiquement -->
                    </div>
                </div>
                
                <!-- Pagination pour les polices -->
                <div class="font-pagination" id="fontPagination">
                    <!-- Les boutons de page seront générés dynamiquement -->
                </div>
                
                <input type="hidden" id="selectedFonts" value="">
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="1">Précédent</button>
                <button class="btn btn-next" data-next="3">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 3: Objectif principal du site -->
        <div class="form-screen" id="screen3">
            <h2 class="screen-title">3. Objectif principal du site</h2>
            
            <div class="form-field">
                <label class="form-label">Quel est l'objectif principal de votre site ?</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="mainObjective" value="services" class="radio-input" checked>
                        Présenter mes services/produits
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="mainObjective" value="seo" class="radio-input">
                        Être visible sur Google
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="mainObjective" value="trust" class="radio-input">
                        Inspirer confiance
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="mainObjective" value="branding" class="radio-input">
                        Valoriser mon image de marque
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="mainObjective" value="other" class="radio-input" id="otherObjective">
                        Autre
                    </label>
                </div>
                
                <div class="conditional-field" id="otherObjectiveField">
                    <input type="text" class="form-input" id="otherObjectiveText" placeholder="Précisez votre objectif">
                </div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="2">Précédent</button>
                <button class="btn btn-next" data-next="4">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 4: Vos offres / produits / services -->
        <div class="form-screen" id="screen4">
            <h2 class="screen-title">4. Vos offres / produits / services</h2>
            
            <div class="form-field">
                <label class="form-label" for="services">Listez les prestations / produits que vous proposez</label>
                <textarea id="services" class="form-textarea" placeholder="Décrivez vos prestations ou produits en détail..."></textarea>
            </div>
            
            <div class="form-field">
                <label class="form-label">Documents existants</label>
                <div class="file-upload">
                    <label class="file-upload-button">
                        <span class="file-upload-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>
                        </span>
                        Télécharger une plaquette ou site existant
                        <input type="file" id="documentUpload" accept=".pdf,.doc,.docx,.jpg,.png" style="display: none;">
                    </label>
                </div>
                <div id="documentName" class="mt-2 text-sm"></div>
            </div>
            
            <div class="form-field">
                <label class="form-label">Options de service</label>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="serviceOptions" value="domicile">
                        Services à domicile
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="serviceOptions" value="devis">
                        Sur devis
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="serviceOptions" value="rdv">
                        RDV en ligne
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="serviceOptions" value="other" id="otherServiceOption">
                        Autre
                    </label>
                </div>
                
                <div class="conditional-field" id="otherServiceField">
                    <input type="text" class="form-input" placeholder="Précisez vos autres options de service">
                </div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="3">Précédent</button>
                <button class="btn btn-next" data-next="5">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 5: Informations pratiques -->
        <div class="form-screen" id="screen5">
            <h2 class="screen-title">5. Informations pratiques à afficher</h2>
            
            <div class="form-field">
                <label class="form-label" for="address">Adresse (facultatif)</label>
                <input type="text" id="address" class="form-input" placeholder="Votre adresse professionnelle" autocomplete="street-address">
            </div>
            
            <div class="form-field">
                <label class="form-label" for="phone">Téléphone</label>
                <input type="tel" id="phone" class="form-input" required placeholder="Ex: 06 12 34 56 78" autocomplete="tel">
                <div class="error-message">Veuillez renseigner un numéro de téléphone valide</div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="email">Email</label>
                <input type="email" id="email" class="form-input" required placeholder="Ex: contact@votre-entreprise.fr" autocomplete="email">
                <div class="error-message">Veuillez renseigner une adresse email valide</div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="hours">Horaires</label>
                <textarea id="hours" class="form-textarea" placeholder="Ex: Lundi-Vendredi: 9h-18h, Samedi: 9h-12h"></textarea>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="area">Zone d'intervention</label>
                <input type="text" id="area" class="form-input" placeholder="Ex: Paris et petite couronne">
            </div>
            
            <div class="form-field">
                <label class="form-label">Moyens de contact préférés</label>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="contactMethods" value="phone" checked>
                        Téléphone
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="contactMethods" value="email" checked>
                        Email
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="contactMethods" value="form">
                        Formulaire de contact
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="contactMethods" value="social">
                        Réseaux sociaux
                    </label>
                </div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="4">Précédent</button>
                <button class="btn btn-next" data-next="6">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 6: Points différenciants -->
        <div class="form-screen" id="screen6">
            <h2 class="screen-title">6. Points différenciants</h2>
            
            <div class="form-field">
                <label class="form-label">Pourquoi vous choisir ? (sélectionnez vos atouts)</label>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="differentiators" value="speed">
                        Rapidité
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="differentiators" value="price">
                        Prix compétitifs
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="differentiators" value="experience">
                        Expérience
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="differentiators" value="service">
                        Service après-vente
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="differentiators" value="local">
                        Entreprise locale
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="differentiators" value="ethical">
                        Démarche éthique/écologique
                    </label>
                </div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="otherDifferentiators">Autres points forts (précisez)</label>
                <textarea id="otherDifferentiators" class="form-textarea" placeholder="Décrivez vos autres avantages concurrentiels..."></textarea>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="5">Précédent</button>
                <button class="btn btn-next" data-next="7">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 7: Ton à adopter -->
        <div class="form-screen" id="screen7">
            <h2 class="screen-title">7. Ton à adopter sur le site</h2>
            
            <div class="form-field">
                <label class="form-label">Quel ton souhaitez-vous pour votre site ?</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="tone" value="professional" class="radio-input" checked>
                        Sérieux et professionnel
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="tone" value="reassuring" class="radio-input">
                        Rassurant et humain
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="tone" value="dynamic" class="radio-input">
                        Dynamique et moderne
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="tone" value="minimalist" class="radio-input">
                        Minimaliste
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="tone" value="other" class="radio-input" id="otherTone">
                        Autre
                    </label>
                </div>
                
                <div class="conditional-field" id="otherToneField">
                    <input type="text" class="form-input" placeholder="Précisez le ton souhaité">
                </div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="6">Précédent</button>
                <button class="btn btn-next" data-next="8">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 8: Pages souhaitées -->
        <div class="form-screen" id="screen8">
            <h2 class="screen-title">8. Pages souhaitées (4 à 5 max)</h2>
            
            <div class="form-field">
                <p style="margin-bottom: 10px; opacity: 0.8;">Choisissez les pages que vous souhaitez avoir sur votre site. Vous pourrez détailler chaque page à l'étape suivante.</p>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input page-checkbox" name="pages" value="home" checked data-detail="homeDetail">
                        Accueil
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input page-checkbox" name="pages" value="services" checked data-detail="servicesDetail">
                        Prestations / Services
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input page-checkbox" name="pages" value="about" checked data-detail="aboutDetail">
                        À propos
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input page-checkbox" name="pages" value="contact" checked data-detail="contactDetail">
                        Contact
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input page-checkbox" name="pages" value="testimonials" data-detail="testimonialsDetail">
                        Témoignages / Avis
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input page-checkbox" name="pages" value="custom" id="customPage" data-detail="customDetail">
                        Autre page
                    </label>
                </div>
                
                <div class="conditional-field" id="customPageField">
                    <input type="text" class="form-input" placeholder="Nom de la page personnalisée">
                </div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="7">Précédent</button>
                <button class="btn btn-next" data-next="9">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 9: Détail page Accueil -->
        <div class="form-screen" id="screen9">
            <h2 class="screen-title">9. Détail Page d'accueil</h2>
            
            <div class="form-field">
                <label class="form-label" for="homeTagline">Phrase d'accroche souhaitée</label>
                <input type="text" id="homeTagline" class="form-input" placeholder="Ex: Votre expert en développement personnel à Lyon">
            </div>
            
            <div class="form-field">
                <label class="form-label">Élément de mise en valeur principale</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="homeHighlight" value="strengths" class="radio-input" checked>
                        Vos points forts
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="homeHighlight" value="services" class="radio-input">
                        Vos services
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="homeHighlight" value="slogan" class="radio-input">
                        Un slogan
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="homeHighlight" value="intro" class="radio-input">
                        Une phrase d'intro ou mission
                    </label>
                </div>
            </div>
            
            <div class="form-field">
                <label class="form-label">Appel à l'action principal</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="homeCTA" value="contact" class="radio-input" checked>
                        Me contacter
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="homeCTA" value="discover" class="radio-input">
                        Découvrir mes offres
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="homeCTA" value="other" class="radio-input" id="otherCTA">
                        Autre
                    </label>
                </div>
                
                <div class="conditional-field" id="otherCTAField">
                    <input type="text" class="form-input" placeholder="Précisez votre appel à l'action">
                </div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="homeIntro">Introduction / Présentation courte</label>
                <textarea id="homeIntro" class="form-textarea" placeholder="Présentez brièvement votre activité pour la page d'accueil..."></textarea>
            </div>
            
            <div class="form-field">
                <label class="form-label">Éléments visuels souhaités sur la page d'accueil</label>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="homeVisuals" value="photo" checked>
                        Photo principale
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="homeVisuals" value="icons">
                        Icônes pour illustrer les services
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="homeVisuals" value="testimonial">
                        Témoignage client
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="homeVisuals" value="other" id="otherHomeVisual">
                        Autre
                    </label>
                </div>
                
                <div class="conditional-field" id="otherHomeVisualField">
                    <input type="text" class="form-input" placeholder="Précisez l'élément visuel souhaité">
                </div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="8">Précédent</button>
                <button class="btn btn-next" data-next="10">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 10: Détail page Services -->
        <div class="form-screen" id="screen10">
            <h2 class="screen-title">10. Détail Page Services / Prestations</h2>
            
            <div class="form-field">
                <label class="form-label" for="servicesList">Liste des prestations à présenter</label>
                <textarea id="servicesList" class="form-textarea" placeholder="Listez vos prestations (une par ligne)"></textarea>
            </div>
            
            <div class="form-field">
                <label class="form-label">Souhaitez-vous préciser les tarifs ?</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="showPrices" value="yes" class="radio-input">
                        Oui
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="showPrices" value="no" class="radio-input" checked>
                        Non
                    </label>
                </div>
            </div>
            
            <div class="form-field">
                <label class="form-label">Type d'organisation souhaitée</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="servicesOrganization" value="category" class="radio-input" checked>
                        Par rubrique
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="servicesOrganization" value="list" class="radio-input">
                        En liste simple
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="servicesOrganization" value="icons" class="radio-input">
                        Avec icônes ou visuels
                    </label>
                </div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="servicesIntro">Introduction de la page services</label>
                <textarea id="servicesIntro" class="form-textarea" placeholder="Texte d'introduction pour présenter vos services..."></textarea>
            </div>
            
            <div class="form-field">
                <label class="form-label">Éléments à inclure</label>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="servicesElements" value="faq">
                        FAQ
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="servicesElements" value="process">
                        Process de travail
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="servicesElements" value="guarantees">
                        Garanties
                    </label>
                </div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="9">Précédent</button>
                <button class="btn btn-next" data-next="11">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 11: Détail page À propos -->
        <div class="form-screen" id="screen11">
            <h2 class="screen-title">11. Détail Page À propos</h2>
            
            <div class="form-field">
                <label class="form-label" for="aboutPresentation">Présentation personnelle / entreprise</label>
                <textarea id="aboutPresentation" class="form-textarea" placeholder="Présentez-vous ou votre entreprise..."></textarea>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="aboutValues">Valeurs / histoire / motivations</label>
                <textarea id="aboutValues" class="form-textarea" placeholder="Partagez vos valeurs, votre histoire..."></textarea>
            </div>
            
            <div class="form-field">
                <label class="form-label">Photo</label>
                <div class="file-upload">
                    <label class="file-upload-button">
                        <span class="file-upload-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>
                        </span>
                        Télécharger une photo (facultatif)
                        <input type="file" id="aboutPhotoUpload" accept=".jpg,.png" style="display: none;">
                    </label>
                </div>
                <div id="aboutPhotoName" class="mt-2 text-sm"></div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="aboutSkills">Compétences / certifications (si pertinent)</label>
                <textarea id="aboutSkills" class="form-textarea" placeholder="Listez vos compétences, diplômes, certifications..."></textarea>
            </div>
            
            <div class="form-field">
                <label class="form-label">Éléments à inclure</label>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="aboutElements" value="team">
                        Présentation de l'équipe
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="aboutElements" value="clients">
                        Clients notables
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="aboutElements" value="vision">
                        Vision / mission
                    </label>
                </div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="10">Précédent</button>
                <button class="btn btn-next" data-next="12">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 12: Détail page Contact -->
        <div class="form-screen" id="screen12">
            <h2 class="screen-title">12. Détail Page Contact</h2>
            
            <div class="form-field">
                <label class="form-label">Type de formulaire souhaité</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="formType" value="basic" class="radio-input" checked>
                        Basique (nom, mail, message)
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="formType" value="detailed" class="radio-input">
                        Détaillé (avec téléphone, sujet, etc.)
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="formType" value="quote" class="radio-input">
                        Demande de devis
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="formType" value="custom" class="radio-input" id="customForm">
                        Personnalisé
                    </label>
                </div>
                
                <div class="conditional-field" id="customFormField">
                    <textarea class="form-textarea" placeholder="Précisez les champs souhaités pour votre formulaire"></textarea>
                </div>
            </div>
            
            <div class="form-field">
                <label class="form-label">Souhaitez-vous une carte Google Maps ?</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="showMap" value="yes" class="radio-input">
                        Oui
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="showMap" value="no" class="radio-input" checked>
                        Non
                    </label>
                </div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="contactClosing">Phrase de clôture</label>
                <input type="text" id="contactClosing" class="form-input" placeholder="Ex: À très vite !">
            </div>
            
            <div class="form-field">
                <label class="form-label" for="contactInfo">Informations complémentaires</label>
                <textarea id="contactInfo" class="form-textarea" placeholder="Ex: délai de réponse, informations supplémentaires..."></textarea>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="11">Précédent</button>
                <button class="btn btn-next" data-next="13">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 13: Détail page Témoignages (si sélectionnée) -->
        <div class="form-screen" id="screen13">
            <h2 class="screen-title">13. Détail Page Témoignages / Avis</h2>
            
            <div class="form-field">
                <label class="form-label">Avez-vous des avis à afficher ?</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="hasTestimonials" value="yes" class="radio-input" id="hasTestimonialsYes">
                        Oui
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="hasTestimonials" value="no" class="radio-input" checked>
                        Non
                    </label>
                </div>
            </div>
            
            <div class="conditional-field" id="testimonialsField">
                <div class="form-field">
                    <label class="form-label" for="testimonialsList">Témoignages (un par bloc)</label>
                    <textarea id="testimonialsList" class="form-textarea" placeholder="Nom du client: Témoignage"></textarea>
                </div>
                
                <div class="form-field">
                    <label class="form-label">Captures d'avis Google ou autres</label>
                    <div class="file-upload">
                        <label class="file-upload-button">
                            <span class="file-upload-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>
                            </span>
                            Télécharger des captures d'avis
                            <input type="file" id="reviewsUpload" accept=".jpg,.png" multiple style="display: none;">
                        </label>
                    </div>
                    <div id="reviewsName" class="mt-2 text-sm"></div>
                </div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="testimonialsIntro">Introduction de la page témoignages</label>
                <textarea id="testimonialsIntro" class="form-textarea" placeholder="Texte d'introduction pour présenter vos témoignages..."></textarea>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="12">Précédent</button>
                <button class="btn btn-next" data-next="14">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 14: Détail page personnalisée (si sélectionnée) -->
        <div class="form-screen" id="screen14">
            <h2 class="screen-title">14. Détail Page personnalisée</h2>
            
            <div class="form-field">
                <label class="form-label" for="customPageName">Nom souhaité de la page</label>
                <input type="text" id="customPageName" class="form-input">
            </div>
            
            <div class="form-field">
                <label class="form-label" for="customPageContent">Contenu prévu</label>
                <textarea id="customPageContent" class="form-textarea" placeholder="Décrivez le contenu de cette page..."></textarea>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="customPageObjective">Objectif de cette page</label>
                <input type="text" id="customPageObjective" class="form-input" placeholder="Ex: informative, conversion, différenciation...">
            </div>
            
            <div class="form-field">
                <label class="form-label">Éléments à inclure</label>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="customPageElements" value="images">
                        Images / illustrations
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="customPageElements" value="cta">
                        Appel à l'action
                    </label>
                </div>
                
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" class="checkbox-input" name="customPageElements" value="list">
                        Liste à puces
                    </label>
                </div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="13">Précédent</button>
                <button class="btn btn-next" data-next="15">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 15: Réseaux sociaux -->
        <div class="form-screen" id="screen15">
            <h2 class="screen-title">15. Réseaux sociaux & présence existante</h2>
            
            <div class="form-field">
                <label class="form-label" for="facebookUrl">Facebook</label>
                <input type="url" id="facebookUrl" class="form-input" placeholder="https://facebook.com/...">
            </div>
            
            <div class="form-field">
                <label class="form-label" for="instagramUrl">Instagram</label>
                <input type="url" id="instagramUrl" class="form-input" placeholder="https://instagram.com/...">
            </div>
            
            <div class="form-field">
                <label class="form-label" for="linkedinUrl">LinkedIn</label>
                <input type="url" id="linkedinUrl" class="form-input" placeholder="https://linkedin.com/in/...">
            </div>
            
            <div class="form-field">
                <label class="form-label" for="otherSocialUrl">Autre réseau social</label>
                <input type="url" id="otherSocialUrl" class="form-input" placeholder="URL du réseau social">
            </div>
            
            <div class="form-field">
                <label class="form-label">Avez-vous un site existant ?</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="hasWebsite" value="yes" class="radio-input" id="hasWebsiteYes">
                        Oui
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="hasWebsite" value="no" class="radio-input" checked>
                        Non
                    </label>
                </div>
                
                <div class="conditional-field" id="websiteUrlField">
                    <input type="url" class="form-input" placeholder="URL de votre site existant">
                </div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="14">Précédent</button>
                <button class="btn btn-next" data-next="16">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 16: Autres demandes -->
        <div class="form-screen" id="screen16">
            <h2 class="screen-title">16. Autres demandes / précisions</h2>
            
            <div class="form-field">
                <label class="form-label" for="otherRequests">Zone libre pour tous les éléments à ne pas oublier</label>
                <textarea id="otherRequests" class="form-textarea" placeholder="Ex: mettre formulaire de rappel, ajouter un CV téléchargeable, etc."></textarea>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="15">Précédent</button>
                <button class="btn btn-next" data-next="17">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 17: Récapitulatif -->
        <div class="form-screen" id="screen17">
            <h2 class="screen-title">17. Récapitulatif complet</h2>
            
            <p style="margin-bottom: 20px;">Vérifiez les informations saisies. Vous pouvez modifier n'importe quelle section en cliquant sur "Modifier".</p>
            
            <!-- Récap Identité -->
            <div class="recap-section">
                <div class="recap-section-title">
                    <span>Identité de l'entreprise</span>
                    <button type="button" class="recap-edit-btn" data-section="1">Modifier</button>
                </div>
                <div class="recap-content">
                    <div class="recap-item">
                        <div class="recap-label">Nom de l'entreprise</div>
                        <div class="recap-value" id="recap-companyName">-</div>
                    </div>
                    <div class="recap-item">
                        <div class="recap-label">Activité principale</div>
                        <div class="recap-value" id="recap-mainActivity">-</div>
                    </div>
                    <div class="recap-item">
                        <div class="recap-label">Secteur d'activité</div>
                        <div class="recap-value" id="recap-sector">-</div>
                    </div>
                    <div class="recap-item">
                        <div class="recap-label">Zone géographique</div>
                        <div class="recap-value" id="recap-location">-</div>
                    </div>
                </div>
            </div>
            
            <!-- Récap Logo -->
            <div class="recap-section">
                <div class="recap-section-title">
                    <span>Logo et identité visuelle</span>
                    <button type="button" class="recap-edit-btn" data-section="2">Modifier</button>
                </div>
                <div class="recap-content">
                    <div class="recap-item">
                        <div class="recap-label">Logo existant</div>
                        <div class="recap-value" id="recap-hasLogo">-</div>
                    </div>
                    <div class="recap-item">
                        <div class="recap-label">Charte graphique</div>
                        <div class="recap-value" id="recap-hasCharte">-</div>
                    </div>
                    <div class="recap-item">
                        <div class="recap-label">Polices sélectionnées</div>
                        <div class="recap-value" id="recap-fonts">-</div>
                    </div>
                    <div class="recap-item">
                        <div class="recap-label">Couleurs</div>
                        <div class="recap-value" id="recap-colors">-</div>
                    </div>
                </div>
            </div>
            
            <!-- Récap Pages -->
            <div class="recap-section">
                <div class="recap-section-title">
                    <span>Pages du site</span>
                    <button type="button" class="recap-edit-btn" data-section="8">Modifier</button>
                </div>
                <div class="recap-content">
                    <div class="recap-item">
                        <div class="recap-label">Pages sélectionnées</div>
                        <div class="recap-value" id="recap-pages">-</div>
                    </div>
                </div>
            </div>
            
            <!-- Récap Contact -->
            <div class="recap-section">
                <div class="recap-section-title">
                    <span>Informations de contact</span>
                    <button type="button" class="recap-edit-btn" data-section="5">Modifier</button>
                </div>
                <div class="recap-content">
                    <div class="recap-item">
                        <div class="recap-label">Téléphone</div>
                        <div class="recap-value" id="recap-phone">-</div>
                    </div>
                    <div class="recap-item">
                        <div class="recap-label">Email</div>
                        <div class="recap-value" id="recap-email">-</div>
                    </div>
                    <div class="recap-item">
                        <div class="recap-label">Adresse</div>
                        <div class="recap-value" id="recap-address">-</div>
                    </div>
                </div>
            </div>
            
            <!-- Autres récaps (vous pouvez ajouter d'autres sections au besoin) -->
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="16">Précédent</button>
                <button class="btn btn-next" data-next="18">Suivant</button>
            </div>
        </div>
        
        <!-- Screen 18: Coordonnées & RDV -->
        <div class="form-screen" id="screen18">
            <h2 class="screen-title">18. Coordonnées & RDV</h2>
            
            <div class="form-field">
                <label class="form-label" for="clientName">Nom, prénom</label>
                <input type="text" id="clientName" class="form-input" required autocomplete="name">
                <div class="error-message">Veuillez renseigner votre nom</div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="clientEmail">Email</label>
                <input type="email" id="clientEmail" class="form-input" required autocomplete="email">
                <div class="error-message">Veuillez renseigner une adresse email valide</div>
            </div>
            
            <div class="form-field">
                <label class="form-label" for="clientPhone">Téléphone</label>
                <input type="tel" id="clientPhone" class="form-input" required autocomplete="tel">
                <div class="error-message">Veuillez renseigner un numéro de téléphone valide</div>
            </div>
            
            <div class="form-field">
                <label class="form-label">Préférence de contact</label>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="contactPreference" value="visio" class="radio-input" id="visioPreference" checked>
                        Visio <span class="recommended-choice">Choix recommandé</span>
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="contactPreference" value="phone" class="radio-input">
                        Téléphone
                    </label>
                </div>
                
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="contactPreference" value="email" class="radio-input">
                        Email
                    </label>
                </div>
            </div>
            
            <!-- Calendrier pour prise de RDV (visible par défaut car Visio sélectionné) -->
            <div class="conditional-field visible" id="rdvField">
                <label class="form-label">Choisissez une date et un horaire pour votre rendez-vous</label>
                
                <div class="calendar-container">
                    <div class="calendar-header">
                        <button type="button" class="calendar-nav" id="prevMonth">&laquo;</button>
                        <div class="calendar-month" id="currentMonth">Mars 2025</div>
                        <button type="button" class="calendar-nav" id="nextMonth">&raquo;</button>
                    </div>
                    
                    <div class="calendar-grid" id="calendar">
                        <!-- Jours de la semaine -->
                        <div class="calendar-day-header">Lun</div>
                        <div class="calendar-day-header">Mar</div>
                        <div class="calendar-day-header">Mer</div>
                        <div class="calendar-day-header">Jeu</div>
                        <div class="calendar-day-header">Ven</div>
                        <div class="calendar-day-header">Sam</div>
                        <div class="calendar-day-header">Dim</div>
                        
                        <!-- Les jours seront générés dynamiquement par JavaScript -->
                    </div>
                    
                    <div class="time-slots" id="timeSlots">
                        <!-- Les créneaux horaires seront générés dynamiquement par JavaScript une fois une date sélectionnée -->
                    </div>
                </div>
            </div>
            
            <div class="form-field">
                <label class="checkbox-label">
                    <input type="checkbox" class="checkbox-input" id="confirmTerms" required>
                    J'accepte que mes informations soient traitées pour la création de mon site web
                </label>
                <div class="error-message" id="confirmTermsError">Veuillez accepter les conditions</div>
            </div>
            
            <div class="navigation-buttons">
                <button class="btn btn-prev" data-prev="17">Précédent</button>
                <button class="btn btn-next" id="submitBtn">Envoyer</button>
            </div>
        </div>
    </div>
    
    <!-- Assistant IA discret -->
    <button class="assistant-button" id="assistantBtn">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
    </button>
    
    <div class="assistant-chat" id="assistantChat">
        <div class="assistant-header">Assistant Bureau des Sites</div>
        <div class="assistant-messages" id="assistantMessages">
            <div class="message assistant">
                Bonjour ! Je suis là pour vous aider à remplir ce formulaire. N'hésitez pas à me poser des questions.
            </div>
        </div>
        <div class="assistant-input">
            <input type="text" id="assistantInput" placeholder="Posez votre question...">
            <button id="assistantSend">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>
            </button>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Variables
            const screens = document.querySelectorAll('.form-screen');
            const progressDots = document.getElementById('progressDots');
            const saveDraftBtn = document.getElementById('saveDraft');
            const saveStatus = document.getElementById('saveStatus');
            const nextButtons = document.querySelectorAll('.btn-next');
            const prevButtons = document.querySelectorAll('.btn-prev');
            const submitBtn = document.getElementById('submitBtn');
            const assistantBtn = document.getElementById('assistantBtn');
            const assistantChat = document.getElementById('assistantChat');
            const assistantInput = document.getElementById('assistantInput');
            const assistantSend = document.getElementById('assistantSend');
            const assistantMessages = document.getElementById('assistantMessages');
            
            // Form data object
            let formData = {
                uploadedFiles: {}
            };
            
            // Current screen
            let currentScreen = 1;
            const totalScreens = screens.length;
            
            // Create progress dots
            for (let i = 1; i <= totalScreens; i++) {
                const dot = document.createElement('div');
                dot.classList.add('dot');
                if (i === 1) dot.classList.add('active');
                dot.setAttribute('data-screen', i);
                dot.addEventListener('click', function() {
                    const screen = parseInt(this.getAttribute('data-screen'));
                    if (screen < currentScreen) {
                        goToScreen(screen);
                    }
                });
                progressDots.appendChild(dot);
            }
            
            // Setup conditional fields
            setupConditionalFields();
            
            // Setup file uploads
            setupFileUploads();
            
            // Setup font options
            setupFontOptions();
            
            // Setup color picker
            setupColorPicker();
            
            // Setup calendar
            setupCalendar();
            
            // Auto save
            setupAutosave();
            
            // Next button click
            nextButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const nextScreen = parseInt(this.getAttribute('data-next'));
                    
                    if (validateScreen(currentScreen)) {
                        saveScreenData(currentScreen);
                        goToScreen(nextScreen);
                    }
                });
            });
            
            // Previous button click
            prevButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const prevScreen = parseInt(this.getAttribute('data-prev'));
                    saveScreenData(currentScreen);
                    goToScreen(prevScreen);
                });
            });
            
            // Submit button click
            if (submitBtn) {
                submitBtn.addEventListener('click', function() {
                    if (validateScreen(currentScreen)) {
                        saveScreenData(currentScreen);
                        submitForm();
                    }
                });
            }
            
            // Assistant toggle
            assistantBtn.addEventListener('click', function() {
                assistantChat.style.display = assistantChat.style.display === 'flex' ? 'none' : 'flex';
            });
            
            // Assistant send message
            assistantSend.addEventListener('click', sendAssistantMessage);
            assistantInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendAssistantMessage();
                }
            });
            
            // Recap edit buttons
            document.querySelectorAll('.recap-edit-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const sectionNumber = parseInt(this.getAttribute('data-section'));
                    goToScreen(sectionNumber);
                });
            });
            
            // Functions
            
            // Go to screen
            function goToScreen(screenNumber) {
                screens.forEach((screen, index) => {
                    if (index + 1 === screenNumber) {
                        screen.classList.add('active');
                    } else {
                        screen.classList.remove('active');
                    }
                });
                
                // Update dots
                const dots = document.querySelectorAll('.dot');
                dots.forEach((dot, index) => {
                    if (index + 1 === screenNumber) {
                        dot.classList.add('active');
                    } else if (index + 1 < screenNumber) {
                        dot.classList.add('active');
                    } else {
                        dot.classList.remove('active');
                    }
                });
                
                currentScreen = screenNumber;
                window.scrollTo(0, 0);
                
                // If going to recap screen, update the recap
                if (screenNumber === 17) {
                    updateRecapScreen();
                }
            }
            
            // Setup conditional fields
            function setupConditionalFields() {
                // Logo et charte graphique
                const hasLogoYes = document.getElementById('hasLogoYes');
                const hasLogoNo = document.getElementById('hasLogoNo');
                const logoUploadField = document.getElementById('logoUploadField');
                const logoPreferencesField = document.getElementById('logoPreferencesField');
                
                if (hasLogoYes && hasLogoNo && logoUploadField && logoPreferencesField) {
                    hasLogoYes.addEventListener('change', function() {
                        if (this.checked) {
                            logoUploadField.classList.add('visible');
                            logoPreferencesField.classList.remove('visible');
                        }
                    });
                    
                    hasLogoNo.addEventListener('change', function() {
                        if (this.checked) {
                            logoUploadField.classList.remove('visible');
                            logoPreferencesField.classList.add('visible');
                        }
                    });
                    
                    // Trigger initial state
                    if (hasLogoYes.checked) {
                        logoUploadField.classList.add('visible');
                    } else if (hasLogoNo.checked) {
                        logoPreferencesField.classList.add('visible');
                    }
                }
                
                // Charte graphique
                const hasCharteYes = document.getElementById('hasCharteYes');
                const hasCharteNo = document.getElementById('hasCharteNo');
                const charteDetailsField = document.getElementById('charteDetailsField');
                
                if (hasCharteYes && hasCharteNo && charteDetailsField) {
                    hasCharteYes.addEventListener('change', function() {
                        if (this.checked) {
                            charteDetailsField.classList.add('visible');
                        }
                    });
                    
                    hasCharteNo.addEventListener('change', function() {
                        if (this.checked) {
                            charteDetailsField.classList.remove('visible');
                        }
                    });
                    
                    // Trigger initial state
                    if (hasCharteYes.checked) {
                        charteDetailsField.classList.add('visible');
                    }
                }
                
                // Other objective
                const otherObjective = document.getElementById('otherObjective');
                const otherObjectiveField = document.getElementById('otherObjectiveField');
                
                if (otherObjective && otherObjectiveField) {
                    otherObjective.addEventListener('change', function() {
                        if (this.checked) {
                            otherObjectiveField.classList.add('visible');
                        } else {
                            otherObjectiveField.classList.remove('visible');
                        }
                    });
                    
                    // Trigger initial state
                    if (otherObjective.checked) {
                        otherObjectiveField.classList.add('visible');
                    }
                }
                
                // Other service option
                const otherServiceOption = document.getElementById('otherServiceOption');
                const otherServiceField = document.getElementById('otherServiceField');
                
                if (otherServiceOption && otherServiceField) {
                    otherServiceOption.addEventListener('change', function() {
                        if (this.checked) {
                            otherServiceField.classList.add('visible');
                        } else {
                            otherServiceField.classList.remove('visible');
                        }
                    });
                    
                    // Trigger initial state
                    if (otherServiceOption.checked) {
                        otherServiceField.classList.add('visible');
                    }
                }
                
                // Other tone
                const otherTone = document.getElementById('otherTone');
                const otherToneField = document.getElementById('otherToneField');
                
                if (otherTone && otherToneField) {
                    otherTone.addEventListener('change', function() {
                        if (this.checked) {
                            otherToneField.classList.add('visible');
                        } else {
                            otherToneField.classList.remove('visible');
                        }
                    });
                    
                    // Trigger initial state
                    if (otherTone.checked) {
                        otherToneField.classList.add('visible');
                    }
                }
                
                // Custom page
                const customPage = document.getElementById('customPage');
                const customPageField = document.getElementById('customPageField');
                
                if (customPage && customPageField) {
                    customPage.addEventListener('change', function() {
                        if (this.checked) {
                            customPageField.classList.add('visible');
                        } else {
                            customPageField.classList.remove('visible');
                        }
                    });
                    
                    // Trigger initial state
                    if (customPage.checked) {
                        customPageField.classList.add('visible');
                    }
                }
                
                // Other CTA
                const otherCTA = document.getElementById('otherCTA');
                const otherCTAField = document.getElementById('otherCTAField');
                
                if (otherCTA && otherCTAField) {
                    otherCTA.addEventListener('change', function() {
                        if (this.checked) {
                            otherCTAField.classList.add('visible');
                        } else {
                            otherCTAField.classList.remove('visible');
                        }
                    });
                    
                    // Trigger initial state
                    if (otherCTA.checked) {
                        otherCTAField.classList.add('visible');
                    }
                }
                
                // Other home visual
                const otherHomeVisual = document.getElementById('otherHomeVisual');
                const otherHomeVisualField = document.getElementById('otherHomeVisualField');
                
                if (otherHomeVisual && otherHomeVisualField) {
                    otherHomeVisual.addEventListener('change', function() {
                        if (this.checked) {
                            otherHomeVisualField.classList.add('visible');
                        } else {
                            otherHomeVisualField.classList.remove('visible');
                        }
                    });
                    
                    // Trigger initial state
                    if (otherHomeVisual.checked) {
                        otherHomeVisualField.classList.add('visible');
                    }
                }
                
                // Custom form
                const customForm = document.getElementById('customForm');
                const customFormField = document.getElementById('customFormField');
                
                if (customForm && customFormField) {
                    customForm.addEventListener('change', function() {
                        if (this.checked) {
                            customFormField.classList.add('visible');
                        } else {
                            customFormField.classList.remove('visible');
                        }
                    });
                    
                    // Trigger initial state
                    if (customForm.checked) {
                        customFormField.classList.add('visible');
                    }
                }
                
                // Has testimonials
                const hasTestimonialsYes = document.getElementById('hasTestimonialsYes');
                const testimonialsField = document.getElementById('testimonialsField');
                
                if (hasTestimonialsYes && testimonialsField) {
                    hasTestimonialsYes.addEventListener('change', function() {
                        if (this.checked) {
                            testimonialsField.classList.add('visible');
                        } else {
                            testimonialsField.classList.remove('visible');
                        }
                    });
                    
                    document.querySelectorAll('input[name="hasTestimonials"]').forEach(radio => {
                        if (radio.value === 'no') {
                            radio.addEventListener('change', function() {
                                if (this.checked) {
                                    testimonialsField.classList.remove('visible');
                                }
                            });
                        }
                    });
                    
                    // Trigger initial state
                    if (hasTestimonialsYes.checked) {
                        testimonialsField.classList.add('visible');
                    }
                }
                
                // Website URL
                const hasWebsiteYes = document.getElementById('hasWebsiteYes');
                const websiteUrlField = document.getElementById('websiteUrlField');
                
                if (hasWebsiteYes && websiteUrlField) {
                    hasWebsiteYes.addEventListener('change', function() {
                        if (this.checked) {
                            websiteUrlField.classList.add('visible');
                        } else {
                            websiteUrlField.classList.remove('visible');
                        }
                    });
                    
                    document.querySelectorAll('input[name="hasWebsite"]').forEach(radio => {
                        if (radio.value === 'no') {
                            radio.addEventListener('change', function() {
                                if (this.checked) {
                                    websiteUrlField.classList.remove('visible');
                                }
                            });
                        }
                    });
                    
                    // Trigger initial state
                    if (hasWebsiteYes.checked) {
                        websiteUrlField.classList.add('visible');
                    }
                }
                
                // RDV visio/téléphone
                const visioPreference = document.getElementById('visioPreference');
                const rdvField = document.getElementById('rdvField');
                
                if (visioPreference && rdvField) {
                    document.querySelectorAll('input[name="contactPreference"]').forEach(radio => {
                        radio.addEventListener('change', function() {
                            if (this.value === 'visio' || this.value === 'phone') {
                                rdvField.classList.add('visible');
                            } else {
                                rdvField.classList.remove('visible');
                            }
                        });
                    });
                    
                    // Trigger initial state
                    if (visioPreference.checked) {
                        rdvField.classList.add('visible');
                    }
                }
            }
            
            // Setup file uploads
            function setupFileUploads() {
                document.querySelectorAll('input[type="file"]').forEach(input => {
                    input.addEventListener('change', function() {
                        if (this.files.length > 0) {
                            const fileNameElement = document.getElementById(this.id + 'Name');
                            if (fileNameElement) {
                                if (this.files.length === 1) {
                                    fileNameElement.textContent = this.files[0].name;
                                } else {
                                    fileNameElement.textContent = `${this.files.length} fichiers sélectionnés`;
                                }
                            }
                            
                            // Store files in formData
                            if (!formData.uploadedFiles[this.id]) {
                                formData.uploadedFiles[this.id] = [];
                            }
                            
                            Array.from(this.files).forEach(file => {
                                formData.uploadedFiles[this.id].push(file.name);
                            });
                        }
                    });
                });
                
                // Make file upload buttons work
                document.querySelectorAll('.file-upload-button').forEach(button => {
                    button.addEventListener('click', function() {
                        const input = this.querySelector('input[type="file"]');
                        if (input) {
                            input.click();
                        }
                    });
                });
            }
            
            // Setup font options with pagination
            function setupFontOptions() {
                const fontOptions = document.getElementById('fontOptions');
                const fontPagination = document.getElementById('fontPagination');
                const fontSearch = document.getElementById('fontSearch');
                const fontCategoryTabs = document.getElementById('fontCategoryTabs');
                const selectedFontsInput = document.getElementById('selectedFonts');
                
                // Liste des polices par catégorie
                const fonts = {
                    serif: [
                        "Playfair Display", "Merriweather", "Georgia", "Times New Roman", "Garamond", 
                        "Baskerville", "Cambria", "Didot", "Caslon", "EB Garamond", "Cormorant Garamond",
                        "Libre Baskerville", "Lora", "Source Serif Pro", "Crimson Text", "Noto Serif", 
                        "PT Serif", "Spectral", "Vollkorn", "Yrsa"
                    ],
                    "sans-serif": [
                        "Poppins", "Roboto", "Open Sans", "Lato", "Montserrat", "Raleway", "Source Sans Pro", 
                        "Ubuntu", "Nunito", "Work Sans", "Inter", "Quicksand", "Fira Sans", "Karla", 
                        "Cabin", "Archivo", "Barlow", "DM Sans", "PT Sans", "Rubik", "Mulish", "Public Sans",
                        "Manrope", "Jost", "Outfit", "Plus Jakarta Sans", "Be Vietnam Pro", "Space Grotesk"
                    ],
                    display: [
                        "Bebas Neue", "Abril Fatface", "Lobster", "Pacifico", "Comfortaa", "Righteous", 
                        "Permanent Marker", "Fredoka One", "Anton", "Staatliches", "Bowlby One SC", 
                        "Satisfy", "Bungee", "Concert One", "Alfa Slab One", "Lilita One", "Monoton",
                        "Passion One", "Racing Sans One", "Changa One", "Secular One", "Fugaz One",
                        "Black Ops One", "Carter One", "Rammetto One", "Kavoon", "Flavors", "Faster One"
                    ],
                    handwriting: [
                        "Dancing Script", "Caveat", "Parisienne", "Sacramento", "Great Vibes", "Kaushan Script", 
                        "Allura", "Yellowtail", "Alex Brush", "Pinyon Script", "Mr Dafoe", "Tangerine", 
                        "Marck Script", "Satisfy", "Rouge Script", "Petit Formal Script", "Clicker Script",
                        "Mrs Saint Delafield", "Monsieur La Doulaise", "Herr Von Muellerhoff", "Princess Sofia",
                        "Miss Fajardose", "Mr De Haviland", "Seaweed Script", "Cedarville Cursive", "League Script"
                    ]
                };
                
                // Créer la liste complète
                const allFonts = [];
                for (const category in fonts) {
                    fonts[category].forEach(font => {
                        allFonts.push({
                            name: font,
                            category: category
                        });
                    });
                }
                
                // Paramètres de pagination
                const fontsPerPage = 24;
                let currentPage = 1;
                let currentCategory = 'all';
                let filteredFonts = [...allFonts];
                const selectedFonts = [];
                
                // Fonction pour afficher les polices
                function renderFonts() {
                    // Filtrer par catégorie
                    if (currentCategory === 'all') {
                        filteredFonts = [...allFonts];
                    } else {
                        filteredFonts = allFonts.filter(font => font.category === currentCategory);
                    }
                    
                    // Filtrer par recherche
                    const searchTerm = fontSearch.value.toLowerCase();
                    if (searchTerm) {
                        filteredFonts = filteredFonts.filter(font => 
                            font.name.toLowerCase().includes(searchTerm)
                        );
                    }
                    
                    // Pagination
                    const totalPages = Math.ceil(filteredFonts.length / fontsPerPage);
                    if (currentPage > totalPages && totalPages > 0) {
                        currentPage = totalPages;
                    }
                    
                    const start = (currentPage - 1) * fontsPerPage;
                    const end = Math.min(start + fontsPerPage, filteredFonts.length);
                    const pageSlice = filteredFonts.slice(start, end);
                    
                    // Vider le conteneur
                    fontOptions.innerHTML = '';
                    
                    // Ajouter les polices
                    pageSlice.forEach(font => {
                        const fontOption = document.createElement('div');
                        fontOption.className = 'font-option';
                        if (selectedFonts.includes(font.name)) {
                            fontOption.classList.add('selected');
                        }
                        fontOption.setAttribute('data-font', font.name);
                        fontOption.style.fontFamily = font.name;
                        fontOption.textContent = font.name;
                        
                        fontOption.addEventListener('click', function() {
                            const maxFonts = 3;
                            const fontName = this.getAttribute('data-font');
                            
                            if (this.classList.contains('selected')) {
                                // Remove selection
                                this.classList.remove('selected');
                                const index = selectedFonts.indexOf(fontName);
                                if (index > -1) {
                                    selectedFonts.splice(index, 1);
                                }
                            } else {
                                // Add selection (max 3)
                                if (selectedFonts.length < maxFonts) {
                                    this.classList.add('selected');
                                    selectedFonts.push(fontName);
                                } else {
                                    alert(`Vous pouvez sélectionner jusqu'à ${maxFonts} polices. Désélectionnez-en une d'abord.`);
                                }
                            }
                            
                            // Update hidden input
                            if (selectedFontsInput) {
                                selectedFontsInput.value = selectedFonts.join(',');
                            }
                        });
                        
                        fontOptions.appendChild(fontOption);
                    });
                    
                    // Mettre à jour la pagination
                    fontPagination.innerHTML = '';
                    
                    if (totalPages > 1) {
                        // Bouton précédent
                        if (currentPage > 1) {
                            const prevBtn = document.createElement('button');
                            prevBtn.textContent = '«';
                            prevBtn.addEventListener('click', () => {
                                currentPage--;
                                renderFonts();
                            });
                            fontPagination.appendChild(prevBtn);
                        }
                        
                        // Pages
                        const maxPageButtons = 5;
                        let startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
                        let endPage = Math.min(totalPages, startPage + maxPageButtons - 1);
                        
                        if (endPage - startPage + 1 < maxPageButtons) {
                            startPage = Math.max(1, endPage - maxPageButtons + 1);
                        }
                        
                        for (let i = startPage; i <= endPage; i++) {
                            const pageBtn = document.createElement('button');
                            pageBtn.textContent = i;
                            if (i === currentPage) {
                                pageBtn.classList.add('active');
                            }
                            pageBtn.addEventListener('click', () => {
                                currentPage = i;
                                renderFonts();
                            });
                            fontPagination.appendChild(pageBtn);
                        }
                        
                        // Bouton suivant
                        if (currentPage < totalPages) {
                            const nextBtn = document.createElement('button');
                            nextBtn.textContent = '»';
                            nextBtn.addEventListener('click', () => {
                                currentPage++;
                                renderFonts();
                            });
                            fontPagination.appendChild(nextBtn);
                        }
                    }
                }
                
                // Gérer les onglets de catégories
                if (fontCategoryTabs) {
                    fontCategoryTabs.querySelectorAll('.font-category-tab').forEach(tab => {
                        tab.addEventListener('click', function() {
                            fontCategoryTabs.querySelectorAll('.font-category-tab').forEach(t => t.classList.remove('active'));
                            this.classList.add('active');
                            currentCategory = this.getAttribute('data-category');
                            currentPage = 1;
                            renderFonts();
                        });
                    });
                }
                
                // Gérer la recherche
                if (fontSearch) {
                    fontSearch.addEventListener('input', function() {
                        currentPage = 1;
                        renderFonts();
                    });
                }
                
                // Initialiser l'affichage
                if (fontOptions && fontPagination) {
                    renderFonts();
                }
            }
            
            // Setup color picker
            function setupColorPicker() {
                const colorPicker = document.getElementById('colorPicker');
                const customColorInput = document.getElementById('customColor');
                const addCustomColorBtn = document.getElementById('addCustomColor');
                
                if (!colorPicker) return;
                
                // Liste de couleurs prédéfinies
                const predefinedColors = [
                    '#FF5252', '#FF4081', '#E040FB', '#7C4DFF', '#536DFE', '#448AFF', 
                    '#40C4FF', '#18FFFF', '#64FFDA', '#69F0AE', '#B2FF59', '#EEFF41', 
                    '#FFFF00', '#FFD740', '#FFAB40', '#FF6E40', '#FFFFFF', '#EEEEEE', 
                    '#BDBDBD', '#757575', '#424242', '#212121', '#3F51B5', '#2196F3', 
                    '#03A9F4', '#00BCD4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', 
                    '#FFEB3B', '#FFC107', '#FF9800', '#FF5722', '#795548', '#607D8B'
                ];
                
                // Créer les échantillons de couleur
                predefinedColors.forEach(color => {
                    const colorSwatch = document.createElement('div');
                    colorSwatch.className = 'color-swatch';
                    colorSwatch.style.backgroundColor = color;
                    colorSwatch.setAttribute('data-color', color);
                    colorSwatch.title = color;
                    
                    colorSwatch.addEventListener('click', function() {
                        const selectedColor = this.getAttribute('data-color');
                        selectColor(selectedColor, this);
                    });
                    
                    colorPicker.appendChild(colorSwatch);
                });
                
                // Gérer l'ajout de couleur personnalisée
                if (addCustomColorBtn && customColorInput) {
                    addCustomColorBtn.addEventListener('click', function() {
                        const customColor = customColorInput.value.trim();
                        if (customColor && isValidColor(customColor)) {
                            // Créer un nouvel échantillon
                            const colorSwatch = document.createElement('div');
                            colorSwatch.className = 'color-swatch';
                            colorSwatch.style.backgroundColor = customColor;
                            colorSwatch.setAttribute('data-color', customColor);
                            colorSwatch.title = customColor;
                            
                            colorSwatch.addEventListener('click', function() {
                                const selectedColor = this.getAttribute('data-color');
                                selectColor(selectedColor, this);
                            });
                            
                            colorPicker.appendChild(colorSwatch);
                            
                            // Sélectionner la nouvelle couleur
                            selectColor(customColor, colorSwatch);
                            
                            // Vider le champ
                            customColorInput.value = '';
                        } else {
                            alert('Veuillez entrer une couleur valide (ex: #FF5500)');
                        }
                    });
                }
                
                // Fonction pour sélectionner une couleur
                function selectColor(color, element) {
                    const maxColors = 3;
                    const selectedColors = getSelectedColors();
                    
                    if (element.classList.contains('selected')) {
                        // Désélectionner
                        element.classList.remove('selected');
                    } else {
                        // Sélectionner (maximum 3)
                        if (selectedColors.length < maxColors) {
                            element.classList.add('selected');
                        } else {
                            alert(`Vous pouvez sélectionner jusqu'à ${maxColors} couleurs. Désélectionnez-en une d'abord.`);
                        }
                    }
                    
                    // Stocker dans formData
                    formData.selectedColors = getSelectedColors();
                }
                
                // Obtenir les couleurs sélectionnées
                function getSelectedColors() {
                    const swatches = colorPicker.querySelectorAll('.color-swatch.selected');
                    return Array.from(swatches).map(swatch => swatch.getAttribute('data-color'));
                }
                
                // Vérifier si la couleur est valide
                function isValidColor(color) {
                    const s = new Option().style;
                    s.color = color;
                    return s.color !== '';
                }
            }
            
            // Setup calendar
            function setupCalendar() {
                const calendar = document.getElementById('calendar');
                const currentMonthElement = document.getElementById('currentMonth');
                const prevMonthBtn = document.getElementById('prevMonth');
                const nextMonthBtn = document.getElementById('nextMonth');
                const timeSlotsContainer = document.getElementById('timeSlots');
                
                if (!calendar || !currentMonthElement || !prevMonthBtn || !nextMonthBtn || !timeSlotsContainer) return;
                
                // Variables
                let currentDate = new Date();
                let selectedDate = null;
                
                // Set minimum date to tomorrow
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                
                // Render calendar
                renderCalendar();
                
                // Event listeners for month navigation
                prevMonthBtn.addEventListener('click', function() {
                    currentDate.setMonth(currentDate.getMonth() - 1);
                    renderCalendar();
                });
                
                nextMonthBtn.addEventListener('click', function() {
                    currentDate.setMonth(currentDate.getMonth() + 1);
                    renderCalendar();
                });
                
                function renderCalendar() {
                    const year = currentDate.getFullYear();
                    const month = currentDate.getMonth();
                    
                    // Set month name
                    const monthNames = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];
                    currentMonthElement.textContent = `${monthNames[month]} ${year}`;
                    
                    // Clear calendar days
                    const headerCells = calendar.querySelectorAll('.calendar-day-header');
                    if (headerCells.length === 0) {
                        // Add day headers if not present
                        const dayNames = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];
                        dayNames.forEach(day => {
                            const dayHeader = document.createElement('div');
                            dayHeader.className = 'calendar-day-header';
                            dayHeader.textContent = day;
                            calendar.appendChild(dayHeader);
                        });
                    }
                    
                    // Remove previous days (but keep headers)
                    const dayCells = calendar.querySelectorAll('.calendar-day');
                    dayCells.forEach(cell => cell.remove());
                    
                    // Get first day of month
                    const firstDay = new Date(year, month, 1);
                    let firstDayIndex = firstDay.getDay() - 1;
                    if (firstDayIndex < 0) firstDayIndex = 6; // Sunday is 0, adjust to 6
                    
                    // Get last day of month
                    const lastDay = new Date(year, month + 1, 0);
                    const daysInMonth = lastDay.getDate();
                    
                    // Add empty cells for days before first day of month
                    for (let i = 0; i < firstDayIndex; i++) {
                        const emptyDay = document.createElement('div');
                        emptyDay.className = 'calendar-day empty';
                        calendar.appendChild(emptyDay);
                    }
                    
                    // Add days of month
                    for (let i = 1; i <= daysInMonth; i++) {
                        const day = document.createElement('div');
                        day.className = 'calendar-day';
                        day.textContent = i;
                        
                        const dayDate = new Date(year, month, i);
                        day.setAttribute('data-date', formatDate(dayDate));
                        
                        // Disable past dates and weekends
                        if (dayDate < tomorrow || dayDate.getDay() === 0 || dayDate.getDay() === 6) {
                            day.classList.add('disabled');
                        } else {
                            day.addEventListener('click', function() {
                                if (!this.classList.contains('disabled')) {
                                    // Remove selected class from all days
                                    calendar.querySelectorAll('.calendar-day').forEach(d => d.classList.remove('selected'));
                                    
                                    // Add selected class to clicked day
                                    this.classList.add('selected');
                                    
                                    // Store selected date
                                    selectedDate = this.getAttribute('data-date');
                                    
                                    // Show time slots
                                    renderTimeSlots(selectedDate);
                                }
                            });
                        }
                        
                        calendar.appendChild(day);
                    }
                    
                    // Add empty cells for days after last day of month if needed
                    const totalCells = firstDayIndex + daysInMonth;
                    const rowsNeeded = Math.ceil(totalCells / 7);
                    const totalCellsNeeded = rowsNeeded * 7;
                    
                    for (let i = totalCells; i < totalCellsNeeded; i++) {
                        const emptyDay = document.createElement('div');
                        emptyDay.className = 'calendar-day empty';
                        calendar.appendChild(emptyDay);
                    }
                }
                
                function renderTimeSlots(date) {
                    timeSlotsContainer.innerHTML = '';
                    
                    // Generate time slots from 9:00 to 17:00
                    const slots = ['09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00'];
                    
                    slots.forEach(slot => {
                        const timeSlot = document.createElement('div');
                        timeSlot.className = 'time-slot';
                        timeSlot.textContent = slot;
                        timeSlot.setAttribute('data-time', slot);
                        
                        // Randomly disable some slots to simulate availability
                        if (Math.random() > 0.7) {
                            timeSlot.classList.add('disabled');
                        } else {
                            timeSlot.addEventListener('click', function() {
                                if (!this.classList.contains('disabled')) {
                                    // Remove selected class from all time slots
                                    timeSlotsContainer.querySelectorAll('.time-slot').forEach(s => s.classList.remove('selected'));
                                    
                                    // Add selected class to clicked time slot
                                    this.classList.add('selected');
                                    
                                    // Store selected time in formData
                                    formData.selectedDateTime = {
                                        date: selectedDate,
                                        time: this.getAttribute('data-time')
                                    };
                                }
                            });
                        }
                        
                        timeSlotsContainer.appendChild(timeSlot);
                    });
                }
                
                function formatDate(date) {
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const day = String(date.getDate()).padStart(2, '0');
                    return `${year}-${month}-${day}`;
                }
            }
            
            // Auto save
            function setupAutosave() {
                // Save on draft button click
                saveDraftBtn.addEventListener('click', function() {
                    saveFormData();
                    saveStatus.textContent = 'Sauvegardé à ' + new Date().toLocaleTimeString();
                    setTimeout(() => {
                        saveStatus.textContent = '';
                    }, 3000);
                });
                
                // Auto save every 30 seconds
                setInterval(function() {
                    saveFormData();
                }, 30000);
                
                // Load saved data on page load
                const savedData = localStorage.getItem('siteBienFait_form');
                if (savedData) {
                    formData = JSON.parse(savedData);
                    loadFormData();
                }
            }
            
            // Save all form data
            function saveFormData() {
                saveScreenData(currentScreen);
                localStorage.setItem('siteBienFait_form', JSON.stringify(formData));
            }
            
            // Save current screen data
            function saveScreenData(screenNum) {
                const screen = document.getElementById(`screen${screenNum}`);
                if (!screen) return;
                
                // Save all inputs, selects, textareas
                screen.querySelectorAll('input:not([type="file"]), select, textarea').forEach(element => {
                    if (element.type === 'checkbox' || element.type === 'radio') {
                        if (element.checked) {
                            formData[element.name] = element.value;
                        }
                    } else {
                        formData[element.id] = element.value;
                    }
                });
                
                // Save checkbox groups (for multi-select)
                const checkboxGroups = {};
                screen.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
                    const name = checkbox.name;
                    if (!checkboxGroups[name]) {
                        checkboxGroups[name] = [];
                    }
                    checkboxGroups[name].push(checkbox.value);
                });
                
                // Add checkbox groups to formData
                for (const groupName in checkboxGroups) {
                    formData[groupName] = checkboxGroups[groupName];
                }
            }
            
            // Load form data
            function loadFormData() {
                // Load all inputs, selects, textareas
                document.querySelectorAll('input:not([type="file"]), select, textarea').forEach(element => {
                    if (element.id && formData[element.id]) {
                        element.value = formData[element.id];
                    }
                });
                
                // Load radio buttons
                for (const key in formData) {
                    const radioButton = document.querySelector(`input[type="radio"][name="${key}"][value="${formData[key]}"]`);
                    if (radioButton) {
                        radioButton.checked = true;
                    }
                }
                
                // Load checkboxes
                for (const key in formData) {
                    if (Array.isArray(formData[key])) {
                        formData[key].forEach(value => {
                            const checkbox = document.querySelector(`input[type="checkbox"][name="${key}"][value="${value}"]`);
                            if (checkbox) {
                                checkbox.checked = true;
                            }
                        });
                    }
                }
                
                // Refresh conditional fields
                setupConditionalFields();
            }
            
            // Update recap screen
            function updateRecapScreen() {
                // Récap Identité
                document.getElementById('recap-companyName').textContent = formData.companyName || '-';
                document.getElementById('recap-mainActivity').textContent = formData.mainActivity || '-';
                document.getElementById('recap-sector').textContent = formData.sector || '-';
                document.getElementById('recap-location').textContent = formData.location || '-';
                
                // Récap Logo
                document.getElementById('recap-hasLogo').textContent = formData.hasLogo === 'yes' ? 'Oui' : 'Non';
                document.getElementById('recap-hasCharte').textContent = formData.hasCharte === 'yes' ? 'Oui' : 'Non';
                document.getElementById('recap-fonts').textContent = formData.selectedFonts ? formData.selectedFonts : '-';
                document.getElementById('recap-colors').textContent = formData.selectedColors ? formData.selectedColors.join(', ') : '-';
                
                // Récap Pages
                const pagesMap = {
                    'home': 'Accueil',
                    'services': 'Prestations / Services',
                    'about': 'À propos',
                    'contact': 'Contact',
                    'testimonials': 'Témoignages / Avis',
                    'custom': 'Page personnalisée'
                };
                
                let pagesText = '';
                if (formData.pages && Array.isArray(formData.pages)) {
                    pagesText = formData.pages.map(page => pagesMap[page] || page).join(', ');
                }
                document.getElementById('recap-pages').textContent = pagesText || '-';
                
                // Récap Contact
                document.getElementById('recap-phone').textContent = formData.phone || '-';
                document.getElementById('recap-email').textContent = formData.email || '-';
                document.getElementById('recap-address').textContent = formData.address || '-';
            }
            
            // Validate current screen
            function validateScreen(screenNum) {
                const screen = document.getElementById(`screen${screenNum}`);
                if (!screen) return true;
                
                let isValid = true;
                
                // Check required fields
                screen.querySelectorAll('input[required], select[required], textarea[required]').forEach(field => {
                    if (!field.value.trim()) {
                        const formField = field.closest('.form-field');
                        if (formField) {
                            formField.classList.add('error');
                            isValid = false;
                        }
                    } else {
                        const formField = field.closest('.form-field');
                        if (formField) {
                            formField.classList.remove('error');
                        }
                    }
                });
                
                // Validate email fields
                screen.querySelectorAll('input[type="email"]').forEach(field => {
                    if (field.value.trim() && !isValidEmail(field.value)) {
                        const formField = field.closest('.form-field');
                        if (formField) {
                            formField.classList.add('error');
                            isValid = false;
                        }
                    }
                });
                
                // Check terms on last screen
                if (screenNum === totalScreens) {
                    const termsCheckbox = document.getElementById('confirmTerms');
                    if (termsCheckbox && !termsCheckbox.checked) {
                        document.getElementById('confirmTermsError').style.display = 'block';
                        isValid = false;
                    } else if (termsCheckbox) {
                        document.getElementById('confirmTermsError').style.display = 'none';
                    }
                }
                
                return isValid;
            }
            
            // Submit form
            function submitForm() {
                // In a real app, you would send the data to a server
                // For this demo, we'll just show a success message
                
                const successHtml = `
                    <div style="text-align: center; padding: 40px 20px;">
                        <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="${getComputedStyle(document.documentElement).getPropertyValue('--secondary')}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                            <polyline points="22 4 12 14.01 9 11.01"></polyline>
                        </svg>
                        <h2 style="color: ${getComputedStyle(document.documentElement).getPropertyValue('--secondary')}; margin: 20px 0;">Formulaire envoyé avec succès !</h2>
                        <p style="margin-bottom: 30px;">Merci pour ces informations. Nous allons maintenant créer votre site "Site Bien Fait".</p>
                        <p>Un email de confirmation vous a été envoyé à <strong>${formData.clientEmail || 'votre adresse email'}</strong>.</p>
                        <p style="margin-top: 30px;">Notre équipe vous contactera très prochainement pour planifier l'entretien d'onboarding.</p>
                    </div>
                `;
                
                // Replace form with success message
                document.querySelector('.form-container').innerHTML = successHtml;
                
                // Hide progress dots
                document.querySelector('.progress-container').style.display = 'none';
                
                // Hide assistant
                document.getElementById('assistantBtn').style.display = 'none';
                document.getElementById('assistantChat').style.display = 'none';
            }
            
            // Send assistant message
            function sendAssistantMessage() {
                const input = document.getElementById('assistantInput');
                const message = input.value.trim();
                
                if (message) {
                    // Add user message
                    const userMessage = document.createElement('div');
                    userMessage.classList.add('message', 'user');
                    userMessage.textContent = message;
                    assistantMessages.appendChild(userMessage);
                    
                    // Clear input
                    input.value = '';
                    
                    // Scroll to bottom
                    assistantMessages.scrollTop = assistantMessages.scrollHeight;
                    
                    // Simulate response (in a real implementation, you would call your AI API)
                    setTimeout(() => {
                        // Get response based on message content
                        let response = getAssistantResponse(message);
                        
                        // Add assistant message
                        const assistantMessage = document.createElement('div');
                        assistantMessage.classList.add('message', 'assistant');
                        assistantMessage.textContent = response;
                        assistantMessages.appendChild(assistantMessage);
                        
                        // Scroll to bottom
                        assistantMessages.scrollTop = assistantMessages.scrollHeight;
                    }, 1000);
                }
            }
            
            // Get assistant response
            function getAssistantResponse(message) {
                message = message.toLowerCase();
                
                // Check for specific keywords
                if (message.includes('logo')) {
                    return "Pour votre logo, vous pouvez soit indiquer que vous en avez déjà un et le télécharger, soit nous laisser vous faire des propositions. Si vous n'avez pas de logo, vous pouvez nous donner des indications sur vos préférences pour nous guider.";
                } else if (message.includes('police') || message.includes('font')) {
                    return "Vous pouvez sélectionner jusqu'à 3 polices qui vous plaisent. Ces polices seront utilisées pour votre site web et votre identité visuelle. Cliquez simplement sur les options qui vous plaisent dans la grille.";
                } else if (message.includes('couleur') || message.includes('color')) {
                    return "Choisissez jusqu'à 3 couleurs pour votre site. Ces couleurs définiront l'identité visuelle de votre site. Vous pouvez également ajouter une couleur personnalisée en spécifiant son code hexadécimal.";
                } else if (message.includes('page') || message.includes('accueil') || message.includes('service')) {
                    return "Vous pouvez sélectionner jusqu'à 5 pages pour votre site. Les pages Accueil, Services, À propos et Contact sont recommandées. Pour chaque page sélectionnée, vous pourrez détailler son contenu à l'étape suivante.";
                } else if (message.includes('délai') || message.includes('temps')) {
                    return "La création de votre site prendra environ 15 jours ouvrés après validation de votre brief et l'entretien d'onboarding avec votre chargé de projet.";
                } else if (message.includes('prix') || message.includes('coût') || message.includes('tarif')) {
                    return "Le Site Bien Fait est disponible à partir de 45€ HT/mois sur 48 mois. Ce tarif inclut la création du site, l'hébergement, le nom de domaine et les mises à jour.";
                } else if (message.includes('rdv') || message.includes('rendez-vous') || message.includes('visio')) {
                    return "Vous pouvez planifier un rendez-vous à la fin du formulaire en sélectionnant une date et un créneau horaire disponible. Nous privilégions les rendez-vous en visioconférence pour plus d'efficacité.";
                } else if (message.includes('sauvegarde')) {
                    return "Vos réponses sont automatiquement sauvegardées. Vous pouvez également cliquer sur 'Sauvegarder le brouillon' en haut du formulaire pour enregistrer manuellement vos données et y revenir plus tard.";
                }
                
                // Default responses
                const defaultResponses = [
                    "Je suis là pour vous aider à remplir ce formulaire. Que souhaitez-vous savoir ?",
                    "N'hésitez pas à prendre votre temps pour remplir ce formulaire. Toutes ces informations nous aideront à créer un site qui vous ressemble.",
                    "Vous pouvez naviguer entre les différentes sections à l'aide des boutons 'Précédent' et 'Suivant', ou en cliquant sur les points en haut du formulaire.",
                    "Plus vous donnez de détails sur votre entreprise et vos besoins, plus votre site sera adapté à vos attentes."
                ];
                
                return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
            }
            
            // Helper function to validate email
            function isValidEmail(email) {
                const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return re.test(email);
            }
        });
    </script>
</body>
</html>
